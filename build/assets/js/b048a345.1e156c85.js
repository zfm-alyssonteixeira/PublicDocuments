"use strict";(self.webpackChunkdocusite=self.webpackChunkdocusite||[]).push([[830],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=c(n),d=a,f=p["".concat(s,".").concat(d)]||p[d]||m[d]||o;return n?r.createElement(f,l(l({ref:t},u),{},{components:n})):r.createElement(f,l({ref:t},u))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[p]="string"==typeof e?e:a,l[1]=i;for(var c=2;c<o;c++)l[c]=n[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8286:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const o={},l=void 0,i={unversionedId:"frontend/Project-structure",id:"frontend/Project-structure",title:"Project-structure",description:"LeeresDiagramm",source:"@site/docs/frontend/Project-structure.md",sourceDirName:"frontend",slug:"/frontend/Project-structure",permalink:"/Docusite/docs/frontend/Project-structure",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/frontend/Project-structure.md",tags:[],version:"current",frontMatter:{},sidebar:"frontendSidebar"},s={},c=[{value:"General",id:"general",level:2},{value:"Components",id:"components",level:2},{value:"Route",id:"route",level:2},{value:"LaravelData (Package)",id:"laraveldata-package",level:2},{value:"Controller",id:"controller",level:2},{value:"Service",id:"service",level:2},{value:"Repository",id:"repository",level:2},{value:"Model",id:"model",level:2}],u={toc:c},p="wrapper";function m(e){let{components:t,...o}=e;return(0,a.kt)(p,(0,r.Z)({},u,o,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Leeres_Diagramm",src:n(5679).Z,width:"3038",height:"2513"})),(0,a.kt)("h2",{id:"general"},"General"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Communication within a layer is allowed"),(0,a.kt)("li",{parentName:"ul"},"Communication between different layers is only allowed as drawn in the figure above"),(0,a.kt)("li",{parentName:"ul"},"The system is divided into different components, such as ",(0,a.kt)("inlineCode",{parentName:"li"},"ContactManagement")," or ",(0,a.kt)("inlineCode",{parentName:"li"},"OrganizationManagement"))),(0,a.kt)("h2",{id:"components"},"Components"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"There must be no communication between the components"),(0,a.kt)("li",{parentName:"ul"},"Each component should be interchangeable"),(0,a.kt)("li",{parentName:"ul"},"Within each component a separate layered architecture is implemented")),(0,a.kt)("h1",{id:"layers"},"Layers"),(0,a.kt)("p",null,"(from outside to inside)"),(0,a.kt)("h2",{id:"route"},"Route"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Validates if model id is an integer"),(0,a.kt)("li",{parentName:"ul"},"Checks ")),(0,a.kt)("h2",{id:"laraveldata-package"},"LaravelData (Package)"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Structures incoming request data to a data object"),(0,a.kt)("li",{parentName:"ul"},"Validates types of incoming request data"),(0,a.kt)("li",{parentName:"ul"},"Deletes not listed properties")),(0,a.kt)("h2",{id:"controller"},"Controller"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Receives the validated LaravelData request objects"),(0,a.kt)("li",{parentName:"ul"},"Can either be a ",(0,a.kt)("inlineCode",{parentName:"li"},"...ManagementController")," or an invokable Controller"),(0,a.kt)("li",{parentName:"ul"},"Does not contain any logic"),(0,a.kt)("li",{parentName:"ul"},"Calls service to process data"),(0,a.kt)("li",{parentName:"ul"},"Sends the response as a LaravelData DTO")),(0,a.kt)("h2",{id:"service"},"Service"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Contains the processing logic"),(0,a.kt)("li",{parentName:"ul"},"Has no dependencies to controller or functions of Laravel"),(0,a.kt)("li",{parentName:"ul"},"Performs interactions to functionalities of Laravel via repositories"),(0,a.kt)("li",{parentName:"ul"},"Contains at the end only imports from repositories or from services (of this component)"),(0,a.kt)("li",{parentName:"ul"},"Has no possibility to call methods on models or on model objects")),(0,a.kt)("h2",{id:"repository"},"Repository"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Performs all requests to models"),(0,a.kt)("li",{parentName:"ul"},"Calls functionality from Laravel"),(0,a.kt)("li",{parentName:"ul"},"Model functions (e.g. ",(0,a.kt)("inlineCode",{parentName:"li"},"User::all()"),") are called in the repository"),(0,a.kt)("li",{parentName:"ul"},"Calls functions on models, such as $project->contacts()->get().")),(0,a.kt)("h2",{id:"model"},"Model"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Specifies data structures for DB"),(0,a.kt)("li",{parentName:"ul"},"Includes all specific methods that are common for Laravel in the model, such as ",(0,a.kt)("inlineCode",{parentName:"li"},"getFullName")," or relation methods")),(0,a.kt)("h1",{id:"solid"},"SOLID"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://mohasin-dev.medium.com/how-to-use-single-responsibility-principle-in-php-laravel-with-example-9c728360f4f2#:~:text=Single%20responsibility%20principle%20means%20A,only%20one%20job%20to%20do."},"SRP"),"\n",(0,a.kt)("a",{parentName:"p",href:"https://www.twilio.com/blog/implementing-open-closed-principle-oop-laravel-php-twilio-sms"},"OC"),"\n",(0,a.kt)("a",{parentName:"p",href:"https://mohasin-dev.medium.com/how-to-use-liskov-substitution-principle-in-php-laravel-df253fd38c8#:~:text=Liskov%20Substitution%20principle%20means%20any,without%20breaking%20the%20client%20code."},"LSP"),"\n",(0,a.kt)("a",{parentName:"p",href:"https://codeburst.io/the-interface-segregation-principle-4c712a9a78c4"},"ISP"),"\n",(0,a.kt)("a",{parentName:"p",href:"https://mohasin-dev.medium.com/how-to-use-dependency-inversion-principles-in-php-laravel-eada45fe7aec"},"DIP"),"!"))}m.isMDXComponent=!0},5679:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/Leeres_Diagramm-8676fa09088b8e963b065546c0ca96ce.png"}}]);